name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
permissions:
  contents: read

jobs:
  build-docker-image:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      #1. CI 설계
      #1-1. SSH Tunneling 설정
#
#      - name: Set PRIVATE_KEY
#        run: |
#          mkdir -p ./src/main/resources/key
#          echo "${{secrets.SSH_PRIVATE_KEY}}" | base64 --decode > ./src/main/resources/key/LawingKey.pem
#          chmod 600 ./src/main/resources/key/LawingKey.pem
#        shell: bash
#
#      - name: Add SSH Host Key
#        run: |
#          mkdir -p ~/.ssh
#          ssh-keyscan 15.164.148.174 >> ~/.ssh/known_hosts
#        shell: bash
#
#      - name: Start SSH Tunnel
#        run: |
#          nohup ssh -v -i ./src/main/resources/key/LawingKey.pem -L 3307:"${{secrets.DB_END_POINT}}":3306 ec2-user@15.164.148.174 -N &
#          sleep 10  # Wait for the tunnel to be established
#        shell: bash

      #1-2. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      #1-3. YML File Build
      - name: Set jwt YML
        run: |
          touch ./src/main/resources/application-jwt.yml
          echo "${{secrets.APPLICATION_JWT_YML}}" | base64 --decode > src/main/resources/application-jwt.yml
        shell: bash

      - name: Set codef YML
        run: |
          touch ./src/main/resources/application-codef.yml
          echo "${{secrets.APPLICATION_CODEF_YML}}" | base64 --decode > src/main/resources/application-codef.yml
        shell: bash

      - name: Set real YML
        run: |
          touch ./src/main/resources/application-real.yml
          echo "${{secrets.APPLICATION_REAL_YML}}" | base64 --decode > src/main/resources/application-real.yml
        shell: bash

      - name: Check if YML files exist
        run: |
          if [ -f ./src/main/resources/application-jwt.yml ] && \
             [ -f ./src/main/resources/application-codef.yml ] && \
             [ -f ./src/main/resources/application-real.yml ]; then
            echo "YML files exist."
          else
            echo "One or more YML files are missing."
            exit 1
          fi

      # 1-4. Spring Boot Applications Build
      - name: Build with Gradle
        run: |
          chmod +x gradlew 
          ./gradlew build --stacktrace --info

      # 1-5. 빌드 결과 확인
      - name: Verify build
        run: ls -l build/libs

      # 1-6. Docker 이미지 빌드
      - name: docker image build
        run: docker build -t chaeniiiii/lawing:latest --platform linux/amd64 .

      # 1-7. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER_NAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 1-8. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push chaeniiiii/lawing:latest

  #2. 위 과정에서 푸시한 이미지를 ec2에서 pull 받아서 실행시키는 과정
  run-docker-image-on-ec2 :
    needs : build-docker-image
    runs-on : self-hosted
    steps :

      # 2-1. 최신 이미지 pull
      - name: docker pull
        run: sudo docker pull chaeniiiii/lawing:latest

      # 2-2. 기존 컨테이너를 중지 및 삭제
      - name: docker stop and remove container
        run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

      # 2-4. 최신 이미지를 컨테이너화하여 실행
      - name: docker run new container
        run: sudo docker run --name github-actions-demo --rm -d -p 8080:8080 chaeniiiii/lawing:latest

      # 2-5. 미사용 이미지 정리
      - name: delete old docker image
        run: sudo docker system prune -f
